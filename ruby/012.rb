# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

 # 1: 1
 # 3: 1,3
 # 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

require 'minitest/autorun'
require 'minitest/pride'

class Target
  attr_accessor :number

  def initialize(number)
    @number = number
  end

  def triangle_number
    1.upto(number).inject(:+)
  end

  def triangle_factors
    (1..triangle_number).select { |x| (triangle_number % x == 0) }
  end

  def divisor_number
    triangle_factors.last == triangle_number ? triangle_factors.count : nil
  end
end

describe Target do
  let(:target) { Target.new(7) }

  describe :number do
    it 'is assigned the number 7' do
      target.number.must_equal(7)
    end
  end

  describe :triangle_number do
    it 'is asked to find the first triangle with the position of 7' do
      target.triangle_number.must_equal(28)
    end
  end

  describe :triangle_factors do
    it 'should find the factors of the triangle number' do
      target.triangle_factors.must_equal([1,2,4,7,14,28])
    end
  end

  describe :divisor_number do
    it 'is asked to find the divisor number with a triangle number of 28' do
      target.divisor_number.must_equal(6)
    end
  end
end
